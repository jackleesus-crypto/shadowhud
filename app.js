// State + UI (same behavior as previous minimal build)
const $=s=>document.querySelector(s), $$=s=>Array.from(document.querySelectorAll(s));
const defaultState={attrs:{Physical:0,Psyche:0,Intellect:0,Financial:0,Social:0,Spiritual:0},quests:[],lastId:0};
let state=load(); function load(){try{return JSON.parse(localStorage.getItem('shadow-min'))||structuredClone(defaultState);}catch(e){return structuredClone(defaultState);}}
function save(){localStorage.setItem('shadow-min', JSON.stringify(state));}
// NAV
function show(name){$$('.screen').forEach(s=>s.classList.remove('visible')); $('#screen-'+name).classList.add('visible'); $$('.tab').forEach(t=>t.classList.remove('active')); if(name==='character') $('#tab-character').classList.add('active'); if(name==='quests') $('#tab-quests').classList.add('active');}
$('#tab-character').onclick=()=>{ $('#appbar-title').textContent='Character'; show('character'); };
$('#tab-quests').onclick=()=>{ $('#appbar-title').textContent='Quests'; show('quests'); };
$('#tab-journey').onclick=()=>alert('Journey coming soon'); $('#tab-store').onclick=()=>alert('Store coming soon'); $('#tab-focus').onclick=()=>alert('Focus coming soon');
// Radar
const labels=["Financial","Physical","Psyche","Intellect","Social","Spiritual"];
function renderRadar(){const svg=$('#radar'); svg.innerHTML=''; const rings=5,R=48;
  for(let i=1;i<=rings;i++){const r=R*i/rings; svg.appendChild(poly(r,'#222'));}
  labels.forEach((lab,i)=>{const a=(Math.PI*2/labels.length)*i - Math.PI/2; const x=Math.cos(a)*R,y=Math.sin(a)*R; line(0,0,x,y,'#222'); const tx=Math.cos(a)*(R+12),ty=Math.sin(a)*(R+12); const t=document.createElementNS('http://www.w3.org/2000/svg','text'); t.setAttribute('x',tx); t.setAttribute('y',ty); t.setAttribute('fill','#a0a0a0'); t.setAttribute('font-size','5'); t.setAttribute('text-anchor','middle'); t.textContent=lab; svg.appendChild(t); });
  const pts = labels.map((lab,i)=>{const val=Math.max(0,Math.min(100,state.attrs[lab]||0)); const a=(Math.PI*2/labels.length)*i - Math.PI/2; const r=(val/100)*R; return [Math.cos(a)*r, Math.sin(a)*r]; });
  const p=document.createElementNS('http://www.w3.org/2000/svg','polygon'); p.setAttribute('points', pts.map(p=>p.join(',')).join(' ')); p.setAttribute('fill','#4da3ff22'); p.setAttribute('stroke','#4da3ff'); p.setAttribute('stroke-width','1.5'); svg.appendChild(p);
  function poly(r,stroke){const pts=labels.map((_,i)=>{const a=(Math.PI*2/labels.length)*i - Math.PI/2; return [Math.cos(a)*r, Math.sin(a)*r];}); const g=document.createElementNS('http://www.w3.org/2000/svg','polygon'); g.setAttribute('points', pts.map(p=>p.join(',')).join(' ')); g.setAttribute('fill','none'); g.setAttribute('stroke',stroke); g.setAttribute('stroke-width','0.6'); return g;}
  function line(x1,y1,x2,y2,stroke){const l=document.createElementNS('http://www.w3.org/2000/svg','line'); l.setAttribute('x1',x1); l.setAttribute('y1',y1); l.setAttribute('x2',x2); l.setAttribute('y2',y2); l.setAttribute('stroke',stroke); l.setAttribute('stroke-width','0.6'); svg.appendChild(l);}
}
function renderTiles(){const grid=$('#attr-grid'); grid.innerHTML=''; const order=["Physical","Psyche","Intellect","Social","Spiritual","Financial"]; for(const lab of order){const tile=document.createElement('div'); tile.className='tile'; tile.innerHTML=`<div class="n">${state.attrs[lab]||0}</div><div class="l">${lab.toUpperCase()}</div>`; let timer=null; tile.addEventListener('mousedown',()=>timer=setTimeout(()=>editAttr(lab),500)); ['mouseup','mouseleave','touchend','touchcancel'].forEach(ev=>tile.addEventListener(ev,()=>{if(timer)clearTimeout(timer);})); tile.addEventListener('touchstart',()=>timer=setTimeout(()=>editAttr(lab),500)); grid.appendChild(tile);}}
function editAttr(lab){const cur=state.attrs[lab]||0; const val=prompt(`${lab} value (0-100)`, String(cur)); if(val===null) return; const n=Math.max(0,Math.min(100,Number(val)||0)); state.attrs[lab]=n; save(); renderRadar(); renderTiles(); }
// Quests
function currentFilter(){return document.querySelector('.chip.active')?.dataset.filter || 'all';}
$$('.chip').forEach(c=>c.onclick=()=>{$$('.chip').forEach(x=>x.classList.remove('active')); c.classList.add('active'); renderQuests(c.dataset.filter);});
function renderQuests(filter='all'){const list=$('#quest-list'); list.innerHTML=''; const now=Date.now(); const filtered=state.quests.filter(q=>{if(filter==='all')return true; if(filter==='active')return !q.completed && !(q.deadline && now>q.deadline); if(filter==='completed')return q.completed; if(filter==='expired')return q.deadline && now>q.deadline && !q.completed;}); $('#empty-note').style.display = filtered.length? 'none':'block'; for(const q of filtered){const node=document.createElement('div'); node.className='card quest'; node.innerHTML='<div class="q-top"><div class="q-title"></div><div class="q-xp"></div></div><div class="q-sub"></div><div class="q-progress"><div class="q-fill" style="width:0%"></div></div><div class="q-actions"><button class="btn small complete">Done</button><button class="btn small ghost pause hidden">Pause</button><button class="btn small ghost resume hidden">Resume</button><button class="btn small ghost inc hidden">+1</button><button class="btn small ghost dec hidden">−1</button><div class="spacer"></div><button class="btn small ghost edit">Edit</button><button class="btn small ghost delete">Delete</button></div>'; node.querySelector('.q-title').textContent=q.title; node.querySelector('.q-xp').textContent=`+${q.xp||0} XP`; const sub=node.querySelector('.q-sub'); const fill=node.querySelector('.q-fill'); const btnC=node.querySelector('.complete'); const btnP=node.querySelector('.pause'); const btnR=node.querySelector('.resume'); const btnI=node.querySelector('.inc'); const btnD=node.querySelector('.dec'); const btnE=node.querySelector('.edit'); const btnDel=node.querySelector('.delete'); if(q.type==='timer'){const rem=timerRemaining(q); const pct=Math.max(0,Math.min(1,1-rem/q.durationMs)); fill.style.width=(pct*100)+'%'; sub.textContent=(q.paused?'Paused — ':'')+formatTime(rem); (q.paused?btnR:btnP).classList.remove('hidden'); } else if(q.type==='counter'){const pct=Math.min(1,(q.count||0)/q.target); fill.style.width=(pct*100)+'%'; sub.textContent=`Count ${q.count||0}/${q.target}`; btnI.classList.remove('hidden'); btnD.classList.remove('hidden'); } else { const done=(q.done||[]).filter(Boolean).length; const total=(q.items||[]).length; const pct=total?done/total:0; fill.style.width=(pct*100)+'%'; sub.textContent=`${done}/${total} items`; } btnC.onclick=()=>completeQuest(q.id); btnP.onclick=()=>{q.paused=true; q.pauseTs=Date.now(); save(); renderQuests(filter);}; btnR.onclick=()=>{ if(q.paused){ const pausedFor=Date.now()-(q.pauseTs||Date.now()); q.endTs+=pausedFor; q.paused=false; save(); renderQuests(filter);} }; btnI.onclick=()=>{q.count=Math.min(q.target,(q.count||0)+1); q.completed=q.count>=q.target; save(); renderQuests(filter);}; btnD.onclick=()=>{q.count=Math.max(0,(q.count||0)-1); q.completed=q.count>=q.target; save(); renderQuests(filter);}; btnE.onclick=()=>{populateForm(q); show('create'); $('#appbar-title').textContent='New Quest';}; btnDel.onclick=()=>{state.quests=state.quests.filter(x=>x.id!==q.id); save(); renderQuests(filter);}; list.appendChild(node); } }
function resetForm(){const f=$('#quest-form'); f.dataset.editing=''; $('#q-title').value=''; $('#q-desc').value=''; $('#q-type').value='timer'; $('#q-duration').value=30; $('#q-target').value=10; $('#q-items').value=''; $('#q-deadline').value=''; $('#q-repeat').value='none'; $('#q-xp').value=25; updateTypeFields();}
function populateForm(q){const f=$('#quest-form'); f.dataset.editing=String(q.id); $('#q-title').value=q.title; $('#q-desc').value=q.desc||''; $('#q-type').value=q.type; $('#q-duration').value=Math.round((q.durationMs||0)/60000)||30; $('#q-target').value=q.target||10; $('#q-items').value=(q.items||[]).join(', '); $('#q-deadline').value=q.deadline? new Date(q.deadline).toISOString().slice(0,16):''; $('#q-repeat').value=q.repeat||'none'; $('#q-xp').value=q.xp||25; updateTypeFields();}
$('#q-type').onchange=updateTypeFields; function updateTypeFields(){const t=$('#q-type').value; $$('.if').forEach(el=>el.classList.remove('show')); $$('.if.'+t).forEach(el=>el.classList.add('show'));}
$('#btn-plus').onclick=()=>{ resetForm(); show('create'); $('#appbar-title').textContent='New Quest'; };
$('#btn-cancel').onclick=()=>{ show('quests'); $('#appbar-title').textContent='Quests'; };
document.querySelector('#quest-form').addEventListener('submit',ev=>{ev.preventDefault(); const editingId=$('#quest-form').dataset.editing; const t=$('#q-type').value; const quest={ id: editingId? Number(editingId): ++state.lastId, title: $('#q-title').value.trim(), desc: $('#q-desc').value.trim(), type:t, repeat: $('#q-repeat').value, xp: Number($('#q-xp').value)||0, completed:false }; const deadlineStr=$('#q-deadline').value; quest.deadline = deadlineStr ? new Date(deadlineStr).getTime() : null; if(t==='timer'){const mins=Math.max(1, Number($('#q-duration').value)||30); const now=Date.now(); quest.durationMs=mins*60000; if(editingId){const ex=state.quests.find(x=>x.id===quest.id); const remaining=ex? timerRemaining(ex):quest.durationMs; quest.startTs=now; quest.endTs=now+remaining; quest.paused=ex?.paused||false;} else {quest.startTs=now; quest.endTs=now+quest.durationMs;}} if(t==='counter'){ quest.target=Math.max(1, Number($('#q-target').value)||10); quest.count=editingId? (state.quests.find(x=>x.id===quest.id)?.count||0) : 0; } if(t==='checklist'){ quest.items=$('#q-items').value.split(',').map(s=>s.trim()).filter(Boolean); quest.done=editingId? (state.quests.find(x=>x.id===quest.id)?.done||quest.items.map(()=>false)) : quest.items.map(()=>false); } if(editingId){const idx=state.quests.findIndex(x=>x.id===quest.id); state.quests[idx]=quest;} else {state.quests.push(quest);} save(); renderQuests(currentFilter()); show('quests'); $('#appbar-title').textContent='Quests'; });
function timerRemaining(q){ if(q.paused) return Math.max(0, q.endTs-(q.pauseTs||Date.now())); return Math.max(0,q.endTs-Date.now()); }
function formatTime(ms){ const s=Math.ceil(ms/1000); const m=Math.floor(s/60); const ss=(''+(s%60)).padStart(2,'0'); const mm=(''+(m%60)).padStart(2,'0'); const hh=Math.floor(m/60); return hh>0?`${hh}:${mm}:${ss}`:`${m}:${ss}`; }
function init(){ renderRadar(); renderTiles(); renderQuests('all'); if(!localStorage.getItem('shadow-min-seed')){ state.quests.push({id:++state.lastId,title:'Hydration',desc:'Drink 8 cups of water',type:'counter',target:8,count:0,repeat:'daily',xp:10,completed:false},{id:++state.lastId,title:'Daily Stretch',desc:'10 minute flexibility',type:'timer',startTs:Date.now(),durationMs:10*60000,endTs:Date.now()+10*60000,paused:false,repeat:'daily',xp:15,completed:false}); save(); localStorage.setItem('shadow-min-seed','1'); renderQuests('all'); }}
window.addEventListener('DOMContentLoaded', init);
